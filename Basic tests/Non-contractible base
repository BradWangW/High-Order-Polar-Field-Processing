import numpy as np
from tqdm import tqdm
from collections import defaultdict
import os
import networkx as nx

def load_off_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    # Parse the vertices and faces from the OFF file
    num_vertices, _, _ = map(int, lines[1].split())

    vertices = np.array([list(map(float, line.split())) for line in lines[2:2 + num_vertices]])
    faces = np.array([list(map(int, line.split()))[1:] for line in lines[2 + num_vertices:]])

    return vertices, faces
        
def obtain_E(F):
    '''
    Obtain the edge list from the face list.
    '''
    E = np.concatenate([
        F[:, [0, 1]], F[:, [1, 2]], F[:, [2, 0]]
    ])
    E = np.unique(np.sort(E, axis=1), axis=0)
    
    return E

def get_E_dual(E, F):
    '''
    Construct the dual edges of the mesh.
    '''
    E_dual = np.zeros((E.shape[0], 2), dtype=int)
    
    # Construct the dual edges
    for i, edge in enumerate(E):
        faces = np.where(np.isin(F, edge).sum(axis=1) == 2)[0]
        if len(faces) == 2:
            E_dual[i] = faces
        else:
            raise ValueError(f'Edge {edge} is not shared by exactly 2 faces.')
    
    return E_dual

def get_genus(graph):
    # Step 1: Calculate the number of vertices (V) and edges (E)
    V = graph.number_of_nodes()
    E = graph.number_of_edges()
    F = (2 * E) // 3

    return (2 - (V - E + F)) // 2

def get_homology_basis(E, F):
    E_tuple = [tuple(e) for e in E]
    E_dual = get_E_dual(E, F)
    
    # Create a graph from the mesh edges
    G = nx.Graph()
    G.add_edges_from(E_tuple)
    
    T = nx.minimum_spanning_tree(G)
    T_arr = np.array(T.edges())
    
    E_included = np.any((E[:, None] == T_arr).all(-1) | 
                        (E[:, None] == T_arr[:, ::-1]).all(-1), axis=1)
    E_dual_tuple = [tuple(e) for e in E_dual[~E_included]]
    
    # Construct the dual graph, where the edges 
    # of the previous spanning tree are removed
    G_dual = nx.Graph()
    G_dual.add_edges_from(E_dual_tuple)
    T_dual = nx.minimum_spanning_tree(G_dual)
    T_dual_arr = np.array(T_dual.edges())
    
    E_dual_included = np.any((E_dual[:, None] == T_dual_arr).all(-1) | 
                             (E_dual[:, None] == T_dual_arr[:, ::-1]).all(-1), axis=1)
    
    E_either_included = E_included | E_dual_included
    
    E_co = E[~E_either_included]
    
    if len(E_co) != 2*get_genus(G):
        raise ValueError(f"Expected {2*get_genus(G)} non-contractible edges, but found {len(E_co)}")
    
    # List to store non-contractible cycles
    cycles = []

    for cotree_edge in tqdm(E_co, 
                            desc="Finding non-contractible cycles", 
                            total=len(E_co),
                            leave=False):
        # Add the cotree edge back to form a cycle
        T.add_edge(*cotree_edge)
        
        # Find the cycle created by adding this edge
        cycle = nx.find_cycle(T, source=cotree_edge[0])
        cycles.append(np.array(cycle))
        
        # Remove the edge again to restore the tree
        T.remove_edge(*cotree_edge)

    return cycles

# Example usage
V, F = load_off_file(os.path.join('..', 'data', 'Kitten.off'))
E = obtain_E(F)

primal_cycles = get_homology_basis(E)
print("Primal Non-Contractible Cycles:")
for cycle in primal_cycles:
    print(cycle)